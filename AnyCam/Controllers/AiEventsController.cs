using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using AnyCam.Models;
using Microsoft.AspNetCore.Authorization;

namespace AnyCam.Controllers
{
    [Authorize]
    public class AiEventsController : Controller
    {
        private readonly ApplicationDbContext _context;

        public AiEventsController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: AiEvents
        public async Task<IActionResult> Index(string searchString, string eventType, int? cameraId, DateTime? startDate, DateTime? endDate, string sortOrder = "timestamp_desc")
        {
            ViewData["CurrentFilter"] = searchString;
            ViewData["EventTypeFilter"] = eventType;
            ViewData["CameraIdFilter"] = cameraId;
            ViewData["StartDateFilter"] = startDate?.ToString("yyyy-MM-dd");
            ViewData["EndDateFilter"] = endDate?.ToString("yyyy-MM-dd");
            ViewData["CurrentSort"] = sortOrder;

            var aiEvents = _context.AiEvents
                .Include(a => a.VideoClip)
                .Include(a => a.Camera)
                .AsQueryable();

            // Apply filters
            if (!string.IsNullOrEmpty(searchString))
            {
                aiEvents = aiEvents.Where(e =>
                    e.Description.Contains(searchString) ||
                    e.EventType.Contains(searchString) ||
                    e.DetectedObjects.Contains(searchString));
            }

            if (!string.IsNullOrEmpty(eventType))
            {
                aiEvents = aiEvents.Where(e => e.EventType == eventType);
            }

            if (cameraId.HasValue)
            {
                aiEvents = aiEvents.Where(e => e.VideoClip.CameraId == cameraId.Value);
            }

            if (startDate.HasValue)
            {
                aiEvents = aiEvents.Where(e => e.Timestamp >= startDate.Value);
            }

            if (endDate.HasValue)
            {
                aiEvents = aiEvents.Where(e => e.Timestamp <= endDate.Value);
            }

            // Apply sorting
            switch (sortOrder)
            {
                case "timestamp_asc":
                    aiEvents = aiEvents.OrderBy(e => e.Timestamp);
                    break;
                case "eventtype":
                    aiEvents = aiEvents.OrderBy(e => e.EventType).ThenByDescending(e => e.Timestamp);
                    break;
                case "eventtype_desc":
                    aiEvents = aiEvents.OrderByDescending(e => e.EventType).ThenByDescending(e => e.Timestamp);
                    break;
                case "camera":
                    aiEvents = aiEvents.OrderBy(e => e.VideoClip.Camera.Name).ThenByDescending(e => e.Timestamp);
                    break;
                case "camera_desc":
                    aiEvents = aiEvents.OrderByDescending(e => e.VideoClip.Camera.Name).ThenByDescending(e => e.Timestamp);
                    break;
                case "alertsent":
                    aiEvents = aiEvents.OrderBy(e => e.AlertSent).ThenByDescending(e => e.Timestamp);
                    break;
                case "alertsent_desc":
                    aiEvents = aiEvents.OrderByDescending(e => e.AlertSent).ThenByDescending(e => e.Timestamp);
                    break;
                default: // timestamp_desc
                    aiEvents = aiEvents.OrderByDescending(e => e.Timestamp);
                    break;
            }

            // Get distinct event types and cameras for filter dropdowns
            ViewData["EventTypes"] = await _context.AiEvents.Select(e => e.EventType).Distinct().ToListAsync();
            ViewData["Cameras"] = await _context.Cameras.ToListAsync();

            return View(await aiEvents.ToListAsync());
        }

        // GET: AiEvents/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var aiEvent = await _context.AiEvents
                .Include(a => a.VideoClip)
                .Include(a => a.Camera)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (aiEvent == null)
            {
                return NotFound();
            }

            return View(aiEvent);
        }

        // AI Events are automatically created by AI processing - no manual creation allowed

        // AI Events are read-only - editing not allowed
        public IActionResult Edit(int? id)
        {
            TempData["Error"] = "AI detection reports cannot be manually edited. They are automatically generated by the AI system.";
            return RedirectToAction(nameof(Index));
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(int id)
        {
            TempData["Error"] = "AI detection reports cannot be manually edited. They are automatically generated by the AI system.";
            return RedirectToAction(nameof(Index));
        }

        // AI Events are read-only - deletion not allowed
        public IActionResult Delete(int? id)
        {
            TempData["Error"] = "AI detection reports cannot be manually deleted. They are automatically generated by the AI system.";
            return RedirectToAction(nameof(Index));
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(int id)
        {
            TempData["Error"] = "AI detection reports cannot be manually deleted. They are automatically generated by the AI system.";
            return RedirectToAction(nameof(Index));
        }

        private bool AiEventExists(int id)
        {
            return _context.AiEvents.Any(e => e.Id == id);
        }
    }
}